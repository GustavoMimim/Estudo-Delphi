unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Imaging.pngimage, Vcl.ExtCtrls,
  Vcl.Imaging.jpeg, Vcl.StdCtrls;

type
  TForm1 = class(TForm)
    painel: TPanel;
    background: TImage;
    trem: TImage;
    moverTrem: TTimer;
    tituloAtaque: TLabel;
    tituloDefesa: TLabel;
    tituloVida: TLabel;
    valorDefesa: TLabel;
    valorAtaque: TLabel;
    labelPersonagemHP: TLabel;
    personagem1: TImage;
    nuvem1: TImage;
    ceu: TImage;
    nuvem2: TImage;
    nuvem3: TImage;
    moverNuvem: TTimer;
    montanhaPerto: TImage;
    campoACimaDoTrilho: TImage;
    montanhaLonge: TImage;
    inimigo: TImage;
    labelInimigoHP: TLabel;
    Label2: TLabel;
    controlaInimigo: TTimer;
    Image1: TImage;
    controleTrem: TTimer;
    frame1: TTimer;
    frame2: TTimer;
    Image2: TImage;
    frame4: TTimer;
    frame3: TTimer;
    auxiliar: TImage;
    ataqueFrame2: TImage;
    ataqueFrame3: TImage;
    ataqueFrame1: TImage;
    frame5: TTimer;
    ataqueFrame4: TImage;
    ataqueFrame5: TImage;
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure moverNuvemTimer(Sender: TObject);
    procedure moverTremTimer(Sender: TObject);
    procedure controlaInimigoTimer(Sender: TObject);
    procedure controleTremTimer(Sender: TObject);
    procedure atacarJogador();
    procedure frame4Timer(Sender: TObject);
    procedure frame1Timer(Sender: TObject);
    procedure frame2Timer(Sender: TObject);
    procedure frame3Timer(Sender: TObject);
    procedure frame5Timer(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;
  ladoNuvem: Integer = 1; //Responsável pelo lado em que a nuvem irá
  lado: Integer = 1; //Lado em que o inimigo está andando
  tremOk: integer = 1; //1 Se o trem está na tela, caso contrário 2
  hpPersonagem: Integer = 100; //Inicia a vida do jogador com 100
  atacando: Integer = 1; //1 Se o jogador está realizando um ataque, caso contrário 2

implementation

{$R *.dfm}

procedure TForm1.moverNuvemTimer(Sender: TObject);
begin
  {Verifica se a primeira nuvem chegou no limite esquerdo da tela}
  if nuvem1.Left < -750 then
  begin
    {Muda a variavel que vai ser responsável pelo lado em que a nuvem irá ir}
    ladoNuvem := 2;
  end;
   {Verifica se a primeira nuvem chegou no limite direito da tela}
  if nuvem1.Left > 960 then
  begin
    {Muda a variavel que vai ser responsável pelo lado em que a nuvem irá ir}
    ladoNuvem := 1;
  end;
  {Move as nuvens 1 e 3 da esquerda para a direita e a nuvem 2 da direita para a esquerda}
  if ladoNuvem = 2 then
  begin
    nuvem1.Left := nuvem1.Left + 1;
    nuvem2.Left := nuvem2.Left - 1;
    nuvem3.Left := nuvem3.Left + 1
  end
  {Move a nuvens 1 e 3 da direita para a esquerda a nuvem 2 da esquerda para a dirieta}
  else
  begin
    nuvem1.Left := nuvem1.Left - 1;
    nuvem2.Left := nuvem2.Left + 1;
    nuvem3.Left := nuvem3.Left - 1;
  end;
end;


procedure TForm1.moverTremTimer(Sender: TObject);
{Chama essa função a cada 0,09 segundos (de acordo com o timer)}
begin
    {Move o trem para a esquerda em 20 pixels}
    trem.Left := trem.Left - 20;
end;

procedure TForm1.controleTremTimer(Sender: TObject);
begin
  {Verifica se o trem já atindiu a margem esquerda da tela}
  if trem.left < -800 then
  begin
    tremOk := 1;
    {Recoloca o trem a direita da tela}
    trem.Left := 900;
    if tremOk = 1 then
    begin
      tremOk := 2;
    end;
    moverTrem.Enabled := true;
  end;
end;

procedure TForm1.controlaInimigoTimer(Sender: TObject);
var
  diferencaEspaco: integer; //Espaço entre o inimigo e personagem
begin
  {Verifica qual lado está o inimigo e o personagem para fazer o cálculo correto}
  if (personagem1.Left >= inimigo.Left) then
    diferencaEspaco := personagem1.Left - inimigo.Left;
  if (personagem1.Left < inimigo.Left) then
    diferencaEspaco := inimigo.Left - personagem1.Left;
  {Se o inimigo não estiver próximo (mais de 150 pixels) do personagem,
  ele deverá andar de uma extremidade da tela a outra em busca do personagem}
  if diferencaEspaco >= 150 then
  begin
    if inimigo.Left <= 0 then
      lado := 1;
    if inimigo.Left >= 850 then
      lado := 2;

    case lado of
      1: inimigo.Left := inimigo.Left + 10;
      2: inimigo.Left := inimigo.Left - 10;
    end;
  end
  {Se estiverem próximos um do outro (menos de 150 pixels)}
  else
  begin
  {Caso o personagem estiver a esquerda do inimigo}
  if (inimigo.Left > personagem1.Left) then
    {inimigo anda para a esquerda}
    inimigo.Left := inimigo.Left - 10;
  {Caso o personagem estiver a direita do inimigo}
  if (inimigo.Left < personagem1.Left) then
    {inimigo anda para a direita}
    inimigo.Left := inimigo.Left + 10;
  {Verifica se a distancia entre o personagem e o inimigo é válida para atacar}
  if (personagem1.Left > inimigo.Left - 50) AND (personagem1.Left < inimigo.Left + 50) then
  begin
    atacarJogador();
  end;
  end;

end;

procedure TForm1.atacarJogador();
var
  atacando: Integer; //Se o inimigo está atacando recebe 1, caso contrário recebe 2

begin
  {Se o inimigo já está no ataque, sair da procedure}
  if atacando = 1 then
  begin
    atacando := 2;
    exit;
  end;
  {Informa que o ataque começou}
  atacando := 1;
  {Atribui a variável o valor que está na exibindo na tela}
  hpPersonagem := StrToInt(labelPersonagemHP.Caption);
  if hpPersonagem = 0 then
  begin
    personagem1.Destroy;
    controlaInimigo.Enabled := false;
    moverTrem.Enabled := false;
    moverNuvem.Enabled := false;
    exit;
  end;
  {Diminuí a vida do inimigo em 10 e exibe na label}
  hpPersonagem := hpPersonagem - 1;
  labelPersonagemHP.Caption := IntToStr(hpPersonagem);
end;

procedure TForm1.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
var
  hpInimigo: integer;
begin
  if hpPersonagem = 0 then
    exit;
  {Verifica se a tecla pressionada foi a Seta Esquerda}
  if Key = VK_LEFT then
  begin
    {Verifica se o personagem não irá passar do limite da margem esquerda}
    if personagem1.Left - 15 > 0 then
    begin
      {Move o personagem para a esquerda}
      personagem1.Left := personagem1.Left - 15;
      {Efeito Parallax nas montanhas}
      if (montanhaPerto.Left >= 10) AND ((personagem1.Left mod 2) = 0) then
      begin
        montanhaPerto.Left := montanhaPerto.Left - 1;
        montanhaLonge.Left := montanhaLonge.Left + 1;
      end;
    end;
  end;
  {Verifica se a tecla pressionada foi a Seta Direita}
  if Key = VK_RIGHT then
  begin
    {Verifica se o personagem não irá passar do limite da margem direita}
    if personagem1.Left + 15 < 900 then
    begin
      {Move o personagem para a direita}
      personagem1.Left := personagem1.Left + 15;
      {Efeito Parallax nas montanhas}
      if (montanhaPerto.Left <= 70) AND ((personagem1.Left mod 2) <> 0) then
      begin
        montanhaPerto.Left := montanhaPerto.Left + 1;
        montanhaLonge.Left := montanhaLonge.Left - 1;
      end;
    end;
  end;
  {Verifica se a tecla pressionada foi a Seta Cima}
  if Key = VK_UP then
  begin
    {Verifica se o personagem não irá passar do limite da margem de cima}
    if personagem1.Top - 15 > 500 then
      personagem1.Top := personagem1.Top - 15;
  end;
  {Verifica se a tecla pressionada foi a Seta Baixo}
  if Key = VK_DOWN then
  begin
    {Verifica se o personagem não irá passar do limite da margem de baixo}
    if personagem1.Top + 15 < 585 then
      personagem1.Top := personagem1.Top + 15;
  end;
  {Verifica se o usuário precissionou a tecla espaço}
  if Key = VK_SPACE then
  begin
    {Verifica se o inimigo está vivo}
    if (StrToInt(labelInimigoHP.Caption) > 0) then
    begin

      if atacando = 1 then
      begin
        atacando := 2;
        frame1.Enabled := true;
      end;

      {Verifica se a distancia entre o personagem e o inimigo é válida para atacar}
      if (personagem1.Left > inimigo.Left - 75) AND (personagem1.Left < inimigo.Left + 75) then
      begin
        hpInimigo := StrToInt(labelInimigoHP.Caption);
        {Diminuí a vida do inimigo em 10 e exibe na label}
        hpInimigo := hpInimigo - 10;
        labelInimigoHP.Caption := IntToStr(hpInimigo);
      end;
      {Verifica se a vida do inimigo ficou menor ou igual a 0}
      if StrToInt(labelInimigoHP.Caption) <= 0 then
      begin
        inimigo.Destroy;
        controlaInimigo.Enabled := false;
      end;

    end
  end;
end;

procedure TForm1.frame1Timer(Sender: TObject);
begin
  auxiliar.Picture := personagem1.Picture;
  personagem1.Picture := ataqueFrame1.Picture;
  ataqueFrame1.Picture := ataqueFrame2.Picture;
  ataqueFrame2.Picture := ataqueFrame3.Picture;
  ataqueFrame3.Picture := ataqueFrame4.Picture;
  ataqueFrame4.Picture := ataqueFrame5.Picture;
  //ataque frame 5 vazio
  frame5.Enabled := false;
  frame2.Enabled := true;
end;

procedure TForm1.frame2Timer(Sender: TObject);
begin
  ataqueFrame5.Picture := auxiliar.Picture;
  auxiliar.Picture := personagem1.Picture;
  personagem1.Picture := ataqueFrame1.Picture;
  ataqueFrame1.Picture := ataqueFrame2.Picture;
  ataqueFrame2.Picture := ataqueFrame3.Picture;
  ataqueFrame3.Picture := ataqueFrame4.Picture;
  //ataque frame 4 vazio
  frame1.Enabled := false;
  frame3.Enabled := true;

end;

procedure TForm1.frame3Timer(Sender: TObject);
begin
  ataqueFrame4.Picture := ataqueFrame5.Picture;
  ataqueFrame5.Picture := auxiliar.Picture;
  auxiliar.Picture := personagem1.Picture;
  personagem1.Picture := ataqueFrame1.Picture;
  ataqueFrame1.Picture := ataqueFrame2.Picture;
  ataqueFrame2.Picture := ataqueFrame3.Picture;
  //ataque frame 3 vazio
  frame2.Enabled := false;
  frame4.Enabled := true;
end;
procedure TForm1.frame4Timer(Sender: TObject);
begin
  ataqueFrame3.Picture := ataqueFrame4.Picture;
  ataqueFrame4.Picture := ataqueFrame5.Picture;
  ataqueFrame5.Picture := auxiliar.Picture;
  auxiliar.Picture := personagem1.Picture;
  personagem1.Picture := ataqueFrame4.Picture;
  ataqueFrame1.Picture := ataqueFrame2.Picture;
  //ataque frame 2 vazio
  frame3.Enabled := false;
  frame4.Enabled := true;
end;

procedure TForm1.frame5Timer(Sender: TObject);
begin
  ataqueFrame2.Picture := ataqueFrame3.Picture;
  ataqueFrame3.Picture := ataqueFrame4.Picture;
  ataqueFrame4.Picture := ataqueFrame5.Picture;
  ataqueFrame5.Picture := auxiliar.Picture;
  auxiliar.Picture := personagem1.Picture;
  personagem1.Picture := ataqueFrame1.Picture;
  //ataque frame 1 vazio
  frame4.Enabled := false;
  frame1.Enabled := false;
  atacando := 1;
  frame5.Enabled := false;
end;

end.
